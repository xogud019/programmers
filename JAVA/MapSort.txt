Key 값에 의한 정렬
1. Map.Entry
//Map.Entry를 리스트로 가져와 key 값으로 정렬하고, 정렬된 순서대로 LinkedHashMap에 추가
    Map<String, String> map = new LinkedHashMap<>(); 

    Map<String, String> result = sortMapByKey(map);

    public static LinkedHashMap<String, String> sortMapByKey(Map<String, String> map) {
        List<Map.Entry<String, String>> entries = new LinkedList<>(map.entrySet());
        Collections.sort(entries, (o1, o2) -> o1.getKey().compareTo(o2.getKey()));

        LinkedHashMap<String, String> result = new LinkedHashMap<>();

        for (Map.Entry<String, String> entry : entries) {
            result.put(entry.getKey(), entry.getValue());
        }

        return result;
    }

2. TreeMap
//TreeMap은 아이템을 추가할 때 설정한 Comparator로 정렬되어 저장되도록 구현된 클래스입니다. 따라서 값을 추가한 이후에 다시 정렬할 필요가 없습니다.
    Map<String, String> map = new TreeMap<>(comparator);

3. List
//keySet 또는 values를 List로 가져온 뒤에, 정렬하는 방법이 있습니다. 둘 중에 한 종류만 정렬이 필요한 경우, 이 방법을 사용
    Map<String, String> map = new HashMap<>();

    List<String> keyList = new ArrayList<>(map.keySet());
    keyList.sort((s1, s2)->s1.compareTo(s2));

4. Stream
    List<Map.Entry<String, String>> entries =
            map.entrySet().stream()
                        .sorted(Map.Entry.comparingByKey())
                        .collect(Collectors.toList());


Value 값에 의한 정렬
1. Map.Entry
//Map.Entry를 리스트로 가져와 value를 기준으로 정렬하고, 정렬된 순서대로 LinkedHashMap에 추가
    Map<String, String> map = new LinkedHashMap<>();

    Map<String, String> result = sortMapByValue(map);

    public static LinkedHashMap<String, String> sortMapByValue(Map<String, String> map) {
        List<Map.Entry<String, String>> entries = new LinkedList<>(map.entrySet());
        Collections.sort(entries, (o1, o2) -> o1.getValue().compareTo(o2.getValue()));

        LinkedHashMap<String, String> result = new LinkedHashMap<>();

        for (Map.Entry<String, String> entry : entries) {
            result.put(entry.getKey(), entry.getValue());
        }

        return result;
    }

2. List
//(s1, s2)->s1.compareTo(s2)는 String::compareTo로 대체할 수 있습니다.
    Map<String, String> map = new HashMap<>();

    List<String> valueList = new ArrayList<>(map.values());
    valueList.sort(String::compareTo);
    
3. Stream
    List<Map.Entry<String, String>> entries = map.entrySet().stream()
            .sorted(Map.Entry.comparingByValue())
            .collect(Collectors.toList());

            
//출처 : https://codechacha.com/ko/java-sort-map/